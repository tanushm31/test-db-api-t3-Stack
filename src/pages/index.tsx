import { RecordsTable } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { use, useEffect,useState } from "react";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {

  // STATE
  const [name, setName] = useState("")
  const [processList, setProcessList] = useState<RecordsTable[]>([])
  // const handleUrl = (id:number)=>{
  //   return `/processInfo/${id}`
  // }
  // Create
  const {mutate: addProcess} = trpc.processf.addProcess.useMutation(
  {
    onSuccess:(pf:any)=>{
      console.log("ADDDED: ",pf);
      setProcessList((prev)=>[...prev,pf])
    },
    onError:(error:any)=>{console.error(error)
      
    }}
    )
    
    // READ
    const {data:getAll, isLoading} = trpc.processf.getProcessList.useQuery(
      undefined,
      {
        onSuccess:(data:any)=>{
          console.log("DATA READ: ",data)
          setProcessList(data)
        }
      }
    )
  // UPDATE

  // DELETE
  const {mutate:deleteProcess} = trpc.processf.deleteProcess.useMutation(
    {
      onSuccess:(p:any)=>
      {
        const {id} = p;
        console.log("DELETED: ", p)
        const newList = processList.filter((item)=>item.id !== id)
        console.log("NEW LIST: ", newList, "OLD LIST: ", processList)
        setProcessList([...newList])
      }
    }
  )
  
  if(isLoading){
    return<div>Loading...</div>
  }
  else if(!getAll){
    return <div>No Data</div>
  }
  return (
    <>
      <Head>
        <title>Process Web</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-centers p-4">
        
        <div className="w-9/12 flex justify-around pt-10">
          <h1 className="text-2xl">List of Processes: </h1>
          <div className="w-1/3 flex justify-around">
            <input type={"text"} value={name} className="bg-red-200 border-2 border-black rounded px-2" onChange={(e)=>{setName(e.target.value)}}/>
            <button type="button" className="bg-blue border-2 px-2 border-black bg-blue-600  hover:bg-red-500 text-white" 
            onClick={()=>{
              console.log({name:name});
              addProcess({title:name})
              setName("")
            }}>ADD</button>
          </div>
        </div>
        <div className="w-9/12 flex justify-start pt-10 bg-gray-400 mt-4">
            <ul className="flex-col items-center justify-around list-decimal list-inside p-4">
              {processList.map((item:any)=>{
                const {id,title} = item
                return <li className={"p-4 my-2 justify-around"} key={id}>
                  <a href={`/processInfo/${id}`} target={"_blank"}> {title}</a>
                  <button className={"ml-4 border-black border-2 bg-red-400 text-white px-2"} key={id} onClick={()=>{deleteProcess({id})}}>Delete</button>
                </li>
              })}
            </ul>
        </div>
      </main>
    </>
  );
};

export default Home;

// type TechnologyCardProps = {
//   name: string;
//   description: string;
//   documentation: string;
// };

// const TechnologyCard: React.FC<TechnologyCardProps> = ({
//   name,
//   description,
//   documentation,
// }) => {
//   return (
//     <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
//       <h2 className="text-lg text-gray-700">{name}</h2>
//       <p className="text-sm text-gray-600">{description}</p>
//       <Link
//         className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
//         href={documentation}
//         target="_blank"
//         rel="noreferrer"
//       >
//         Documentation
//       </Link>
//     </section>
//   );
// };
